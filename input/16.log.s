 .section        .rodata
.int_wformat: .string "%d\n"
.str_wformat: .string "%s\n"
.int_rformat: .string "%d"
  .comm _gp, 20, 4
 .text
 .globl main
 .type main,@function
main:   nop
 pushq %rbp
 movq %rsp, %rbp
 movl $1, %ecx
 movq $_gp, %rbx
 addq $0, %rbx
 movl %ecx, (%rbx)
 movl $2, %ecx
 movq $_gp, %rbx
 addq $4, %rbx
 movl %ecx, (%rbx)
 movl $3, %ecx
 movq $_gp, %rbx
 addq $8, %rbx
 movl %ecx, (%rbx)
 movl $4, %ecx
 movq $_gp, %rbx
 addq $12, %rbx
 movl %ecx, (%rbx)
 movq $_gp, %rbx
 addq $0, %rbx
 movl (%rbx), %ecx
 movq $_gp, %rbx
 addq $4, %rbx
 movl (%rbx), %edx
 cmpl %ecx, %edx
 movl $0, %edx
 movl $1, %r8d
 cmovl %r8d, %edx
 movq $_gp, %rbx
 addq $16, %rbx
 movl %edx, (%rbx)
 movq $_gp, %rbx
 addq $16, %rbx
 movl (%rbx), %ecx
 movl %edx, %esi
 movl $0, %eax
 movl $.int_wformat, %edi
 call printf
 movq $_gp, %rbx
 addq $0, %rbx
 movl (%rbx), %edx
 movq $_gp, %rbx
 addq $4, %rbx
 movl (%rbx), %r8d
 cmpl %edx, %r8d
 movl $0, %r8d
 movl $1, %r9d
 cmove %r9d, %r8d
 movl %r8d, %esi
 movl $0, %eax
 movl $.int_wformat, %edi
 call printf
 movq $_gp, %rbx
 addq $0, %rbx
 movl (%rbx), %edx
 movq $_gp, %rbx
 addq $0, %rbx
 movl (%rbx), %r9d
 cmpl %edx, %r9d
 movl $0, %r9d
 movl $1, %r10d
 cmove %r10d, %r9d
 movl %r9d, %esi
 movl $0, %eax
 movl $.int_wformat, %edi
 call printf
 movq $_gp, %rbx
 addq $12, %rbx
 movl (%rbx), %edx
 movq $_gp, %rbx
 addq $8, %rbx
 movl (%rbx), %r10d
 cmpl %edx, %r10d
 movl $0, %r10d
 movl $1, %r11d
 cmovg %r11d, %r10d
 movl %r10d, %esi
 movl $0, %eax
 movl $.int_wformat, %edi
 call printf
 movq $_gp, %rbx
 addq $4, %rbx
 movl (%rbx), %edx
 movq $_gp, %rbx
 addq $4, %rbx
 movl (%rbx), %r11d
 cmpl %edx, %r11d
 movl $0, %r11d
 movl $1, %r12d
 cmovge %r12d, %r11d
 movl %r11d, %esi
 movl $0, %eax
 movl $.int_wformat, %edi
 call printf
 movq $_gp, %rbx
 addq $8, %rbx
 movl (%rbx), %edx
 movq $_gp, %rbx
 addq $0, %rbx
 movl (%rbx), %r12d
 cmpl %edx, %r12d
 movl $0, %r12d
 movl $1, %r13d
 cmovle %r13d, %r12d
 movl %r12d, %esi
 movl $0, %eax
 movl $.int_wformat, %edi
 call printf
 movq $_gp, %rbx
 addq $0, %rbx
 movl (%rbx), %edx
 movq $_gp, %rbx
 addq $4, %rbx
 movl (%rbx), %r13d
 cmpl %edx, %r13d
 movl $0, %r13d
 movl $1, %r14d
 cmovne %r14d, %r13d
 movl %r13d, %esi
 movl $0, %eax
 movl $.int_wformat, %edi
 call printf
 movq $_gp, %rbx
 addq $12, %rbx
 movl (%rbx), %edx
 movq $_gp, %rbx
 addq $8, %rbx
 movl (%rbx), %r14d
 cmpl %edx, %r14d
 movl $0, %r14d
 movl $1, %r15d
 cmovg %r15d, %r14d
 movl %r15d, %esi
 movl $0, %eax
 movl $.int_wformat, %edi
 call printf
 movq $_gp, %rbx
 addq $0, %rbx
 movl (%rbx), %edx
 movq $_gp, %rbx
 addq $4, %rbx
 movl (%rbx), %r15d
 cmpl %edx, %r15d
 movl $0, %r15d
 movl $1, (null)
 cmovg (null), %r15d
 movq $_gp, %rbx
 addq $12, %rbx
 movl (%rbx), %edx
 movq $_gp, %rbx
 addq $8, %rbx
 movl (%rbx), (null)
 cmpl %edx, (null)
 movl $0, (null)
 movl $1, (null)
 cmovg (null), (null)
 movl (null), %esi
 movl $0, %eax
 movl $.int_wformat, %edi
 call printf
 movq $_gp, %rbx
 addq $4, %rbx
 movl (%rbx), %edx
 movq $_gp, %rbx
 addq $0, %rbx
 movl (%rbx), (null)
 cmpl %edx, (null)
 movl $0, (null)
 movl $1, (null)
 cmovg (null), (null)
 movq $_gp, %rbx
 addq $12, %rbx
 movl (%rbx), %edx
 movq $_gp, %rbx
 addq $8, %rbx
 movl (%rbx), (null)
 cmpl %edx, (null)
 movl $0, (null)
 movl $1, (null)
 cmovg (null), (null)
 movl (null), %esi
 movl $0, %eax
 movl $.int_wformat, %edi
 call printf
 movq $_gp, %rbx
 addq $0, %rbx
 movl (%rbx), %edx
 movq $_gp, %rbx
 addq $4, %rbx
 movl (%rbx), (null)
 cmpl %edx, (null)
 movl $0, (null)
 movl $1, (null)
 cmove (null), (null)
 movq $_gp, %rbx
 addq $0, %rbx
 movl (%rbx), %edx
 movq $_gp, %rbx
 addq $4, %rbx
 movl (%rbx), (null)
 cmpl %edx, (null)
 movl $0, (null)
 movl $1, (null)
 cmovl (null), (null)
 movq $_gp, %rbx
 addq $8, %rbx
 movl (%rbx), %edx
 movq $_gp, %rbx
 addq $12, %rbx
 movl (%rbx), (null)
 cmpl %edx, (null)
 movl $0, (null)
 movl $1, (null)
 cmovne (null), (null)
 movl (null), %esi
 movl $0, %eax
 movl $.int_wformat, %edi
 call printf
 leave
 ret
